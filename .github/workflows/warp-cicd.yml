name: Warp Web Navigator CI/CD

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test'
        required: true
        default: 'staging'
        type: choice
        options:
        - development
        - staging
        - production
      test_suite:
        description: 'Test suite to run'
        required: true
        default: 'full'
        type: choice
        options:
        - basic
        - forms
        - interactions
        - performance
        - accessibility
        - full

env:
  WARP_API_KEY: ${{ secrets.WARP_API_KEY }}
  WARP_ENDPOINT: ${{ secrets.WARP_ENDPOINT || 'https://api.warp.dev/v1' }}
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  TEAMS_WEBHOOK: ${{ secrets.TEAMS_WEBHOOK }}

jobs:
  lint-and-build:
    name: Lint and Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Build extension
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: extension-build
          path: dist/
          retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  warp-testing:
    name: Warp Web Testing
    runs-on: ubuntu-latest
    needs: lint-and-build
    strategy:
      matrix:
        browser: [chrome, edge]
        environment: [development, staging]
        test_suite: [basic, forms, interactions, performance]
        exclude:
          - environment: staging
            test_suite: basic
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: extension-build
          path: dist/

      - name: Setup Chrome/Chromium
        uses: browser-actions/setup-chrome@latest
        if: matrix.browser == 'chrome'
        with:
          chrome-version: stable

      - name: Setup Microsoft Edge
        uses: browser-actions/setup-edge@latest
        if: matrix.browser == 'edge'
        with:
          edge-version: stable

      - name: Setup Warp Testing Environment
        run: |
          # Install Warp CLI tools
          curl -fsSL https://api.warp.dev/install.sh | bash
          
          # Configure Warp environment
          warp config set api-key "$WARP_API_KEY"
          warp config set endpoint "$WARP_ENDPOINT"
          warp config set browser "${{ matrix.browser }}"
          warp config set environment "${{ matrix.environment }}"

      - name: Load Extension in Browser
        run: |
          # Create extension loading script
          cat > load_extension.js << 'EOF'
          const puppeteer = require('puppeteer');
          const path = require('path');
          
          (async () => {
            const browser = await puppeteer.launch({
              headless: false,
              args: [
                '--load-extension=' + path.resolve('./dist'),
                '--disable-extensions-except=' + path.resolve('./dist'),
                '--disable-web-security',
                '--disable-features=TranslateUI',
                '--no-first-run'
              ]
            });
            
            const page = await browser.newPage();
            
            // Wait for extension to load
            await page.waitForTimeout(3000);
            
            // Inject Warp testing modules
            await page.addScriptTag({ path: './dist/src/cicd-integration.js' });
            await page.addScriptTag({ path: './dist/src/ai-communication.js' });
            await page.addScriptTag({ path: './dist/src/advanced-testing.js' });
            
            // Initialize CI/CD testing
            const testConfig = {
              environment: '${{ matrix.environment }}',
              testingSuites: ['${{ matrix.test_suite }}'],
              cicdProvider: 'github-actions',
              reportFormats: ['json', 'junit', 'html'],
              notifications: {
                slack: process.env.SLACK_WEBHOOK,
                teams: process.env.TEAMS_WEBHOOK
              }
            };
            
            await page.evaluate((config) => {
              window.warpCICD = new WarpCICD();
              window.warpCICD.updateConfig(config);
              return window.warpCICD.triggerManualTest(
                { url: window.location.href, title: document.title },
                config.testingSuites
              );
            }, testConfig);
            
            await browser.close();
          })();
          EOF
          
          npm install puppeteer
          node load_extension.js

      - name: Run Warp Test Suite
        id: warp-tests
        run: |
          # Run comprehensive testing based on matrix parameters
          case "${{ matrix.test_suite }}" in
            "basic")
              warp test run --suite=basic --output=./test-results/
              ;;
            "forms")
              warp test run --suite=forms --include-validation --output=./test-results/
              ;;
            "interactions")
              warp test run --suite=interactions --include-complex-flows --output=./test-results/
              ;;
            "performance")
              warp test run --suite=performance --include-metrics --output=./test-results/
              ;;
            *)
              warp test run --suite=full --output=./test-results/
              ;;
          esac
          
          # Extract test results
          TEST_STATUS=$(cat ./test-results/summary.json | jq -r '.status')
          TESTS_PASSED=$(cat ./test-results/summary.json | jq -r '.passed')
          TESTS_FAILED=$(cat ./test-results/summary.json | jq -r '.failed')
          
          echo "test_status=$TEST_STATUS" >> $GITHUB_OUTPUT
          echo "tests_passed=$TESTS_PASSED" >> $GITHUB_OUTPUT
          echo "tests_failed=$TESTS_FAILED" >> $GITHUB_OUTPUT

      - name: AI Analysis of Test Results
        if: always()
        run: |
          # Send test results to AI for analysis
          warp ai analyze --input=./test-results/ --output=./ai-analysis.json
          
          # Extract AI recommendations
          AI_SCORE=$(cat ./ai-analysis.json | jq -r '.score // "N/A"')
          AI_RISK=$(cat ./ai-analysis.json | jq -r '.riskLevel // "unknown"')
          AI_DEPLOYMENT=$(cat ./ai-analysis.json | jq -r '.deploymentRecommendation // "review"')
          
          echo "ai_score=$AI_SCORE" >> $GITHUB_OUTPUT
          echo "ai_risk=$AI_RISK" >> $GITHUB_OUTPUT
          echo "ai_deployment=$AI_DEPLOYMENT" >> $GITHUB_OUTPUT

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.browser }}-${{ matrix.environment }}-${{ matrix.test_suite }}
          path: |
            test-results/
            ai-analysis.json
          retention-days: 30

      - name: Publish Test Results
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Warp Tests (${{ matrix.browser }} - ${{ matrix.environment }} - ${{ matrix.test_suite }})
          path: test-results/junit.xml
          reporter: java-junit
          fail-on-error: true

      - name: Comment PR with Results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const testStatus = '${{ steps.warp-tests.outputs.test_status }}';
            const testsPassed = '${{ steps.warp-tests.outputs.tests_passed }}';
            const testsFailed = '${{ steps.warp-tests.outputs.tests_failed }}';
            const aiScore = '${{ steps.warp-tests.outputs.ai_score }}';
            const aiRisk = '${{ steps.warp-tests.outputs.ai_risk }}';
            
            const statusIcon = testStatus === 'passed' ? '‚úÖ' : '‚ùå';
            const riskColor = aiRisk === 'low' ? 'üü¢' : aiRisk === 'medium' ? 'üü°' : 'üî¥';
            
            const comment = `## ${statusIcon} Warp Test Results - ${{ matrix.browser }} (${{ matrix.environment }})
            
            ### Test Summary
            - **Status**: ${testStatus}
            - **Passed**: ${testsPassed}
            - **Failed**: ${testsFailed}
            - **Suite**: ${{ matrix.test_suite }}
            
            ### AI Analysis
            - **Score**: ${aiScore}/10
            - **Risk Level**: ${riskColor} ${aiRisk}
            - **Deployment**: ${aiDeployment}
            
            ### Environment Details
            - **Browser**: ${{ matrix.browser }}
            - **Environment**: ${{ matrix.environment }}
            - **Workflow**: ${{ github.workflow }}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: warp-testing
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse Performance Tests
        run: |
          # Test key pages with Warp extension enabled
          lhci collect --url=https://staging.example.com \
                       --url=https://staging.example.com/login \
                       --url=https://staging.example.com/dashboard \
                       --chrome-flags="--load-extension=./dist" \
                       --settings.chromeFlags="--disable-extensions-except=./dist"

      - name: Upload Lighthouse Results
        run: lhci upload --target=temporary-public-storage

  deployment-gating:
    name: Deployment Gate
    runs-on: ubuntu-latest
    needs: [lint-and-build, security-scan, warp-testing, performance-monitoring]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download Test Results
        uses: actions/download-artifact@v4
        with:
          path: all-test-results/

      - name: Aggregate Test Results
        id: aggregate
        run: |
          # Aggregate all test results
          TOTAL_PASSED=0
          TOTAL_FAILED=0
          
          for result_dir in all-test-results/test-results-*/; do
            if [ -f "$result_dir/summary.json" ]; then
              PASSED=$(cat "$result_dir/summary.json" | jq -r '.passed // 0')
              FAILED=$(cat "$result_dir/summary.json" | jq -r '.failed // 0')
              TOTAL_PASSED=$((TOTAL_PASSED + PASSED))
              TOTAL_FAILED=$((TOTAL_FAILED + FAILED))
            fi
          done
          
          SUCCESS_RATE=$((TOTAL_PASSED * 100 / (TOTAL_PASSED + TOTAL_FAILED)))
          
          echo "total_passed=$TOTAL_PASSED" >> $GITHUB_OUTPUT
          echo "total_failed=$TOTAL_FAILED" >> $GITHUB_OUTPUT
          echo "success_rate=$SUCCESS_RATE" >> $GITHUB_OUTPUT
          
          # Determine deployment readiness
          if [ $SUCCESS_RATE -ge 95 ] && [ $TOTAL_FAILED -le 2 ]; then
            echo "deployment_ready=true" >> $GITHUB_OUTPUT
          else
            echo "deployment_ready=false" >> $GITHUB_OUTPUT
          fi

      - name: Deployment Decision
        run: |
          if [ "${{ steps.aggregate.outputs.deployment_ready }}" == "true" ]; then
            echo "‚úÖ Deployment approved: ${{ steps.aggregate.outputs.success_rate }}% success rate"
            echo "DEPLOY_APPROVED=true" >> $GITHUB_ENV
          else
            echo "‚ùå Deployment blocked: ${{ steps.aggregate.outputs.success_rate }}% success rate"
            echo "DEPLOY_APPROVED=false" >> $GITHUB_ENV
            exit 1
          fi

      - name: Deploy to Extension Stores
        if: env.DEPLOY_APPROVED == 'true'
        run: |
          # Deploy to Chrome Web Store
          echo "üöÄ Deploying to Chrome Web Store..."
          # Add Chrome Web Store deployment logic here
          
          # Deploy to Microsoft Edge Add-ons
          echo "üöÄ Deploying to Microsoft Edge Add-ons..."
          # Add Edge deployment logic here

  notification:
    name: Notification
    runs-on: ubuntu-latest
    needs: [warp-testing, deployment-gating]
    if: always()
    steps:
      - name: Notify Slack
        if: env.SLACK_WEBHOOK
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              attachments: [{
                color: '${{ job.status }}' === 'success' ? 'good' : 'danger',
                blocks: [{
                  type: 'section',
                  text: {
                    type: 'mrkdwn',
                    text: `*Warp CI/CD Pipeline ${{ job.status }}*\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n*Commit:* ${{ github.sha }}\n*Author:* ${{ github.actor }}`
                  }
                }]
              }]
            }

      - name: Notify Microsoft Teams
        if: env.TEAMS_WEBHOOK
        uses: skitionek/notify-microsoft-teams@master
        with:
          webhook_url: ${{ secrets.TEAMS_WEBHOOK }}
          overwrite: |
            {
              "@type": "MessageCard",
              "@context": "http://schema.org/extensions",
              "summary": "Warp CI/CD Pipeline ${{ job.status }}",
              "themeColor": "${{ job.status == 'success' && '00FF00' || 'FF0000' }}",
              "sections": [{
                "activityTitle": "Warp Web Navigator CI/CD",
                "activitySubtitle": "Pipeline ${{ job.status }}",
                "facts": [
                  {"name": "Repository", "value": "${{ github.repository }}"},
                  {"name": "Branch", "value": "${{ github.ref_name }}"},
                  {"name": "Commit", "value": "${{ github.sha }}"},
                  {"name": "Author", "value": "${{ github.actor }}"}
                ]
              }]
            }

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [notification]
    if: always()
    steps:
      - name: Cleanup old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            
            // Keep only the 10 most recent artifacts
            const sortedArtifacts = artifacts.data.artifacts.sort((a, b) => 
              new Date(b.created_at) - new Date(a.created_at)
            );
            
            for (const artifact of sortedArtifacts.slice(10)) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
            }
